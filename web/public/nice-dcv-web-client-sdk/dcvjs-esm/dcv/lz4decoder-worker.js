self.importScripts(baseUrl+"/lib/lz4/lz4_decoder.js"),self.frameCount=0,self.totalFrameDecodingTime=0,self.onmessage=function(e){switch(e.data.type){case"frame":let a,t,s,r,l,f,o,i=(new Date).getTime(),n=e.data.height,d=e.data.width,m=e.data.frame.byteLength,g=new Uint8Array(e.data.frame);if(a=e.data.isRgb?3*d*n:d*(n+n/2),t=Module._malloc(a),l=new Uint8Array(Module.HEAPU8.buffer,t,a),s=Module._malloc(m),r=new Uint8Array(Module.HEAPU8.buffer,s,m),r.set(new Uint8Array(g.buffer)),e.data.frame=null,o=_LZ4_decompress_safe(r.byteOffset,l.byteOffset,m,a),Module._free(s),Module._free(t),g=null,e.data.frame=null,self.frameCount++,self.totalFrameDecodingTime+=(new Date).getTime()-i,o<0)self.postMessage({type:"info",message:"[LZ4-Worker] Error in worker: decodedSize ("+o+") must be positive!!!"});else{if(e.data.usingWebGLDecoder)f=new Uint8Array(l);else{f=new Uint8ClampedArray(d*n*4);for(let e=0,a=0;a<o;a+=3)f[e]=l[a],f[e+1]=l[a+1],f[e+2]=l[a+2],f[e+3]=255,e+=4}l=null,self.postMessage({type:"frame",buffer:f,width:d,height:n,x:e.data.x,y:e.data.y,decodedSize:o},[f.buffer])}break;case"stats":self.postMessage({type:"stats",frameCount:self.frameCount,totalFrameDecodingTime:self.totalFrameDecodingTime,averageDecodingTime:self.totalFrameDecodingTime/self.frameCount,averageDecodingFPS:self.frameCount/(self.totalFrameDecodingTime/1e3)}),self.frameCount=0,self.totalFrameDecodingTime=0;break;case"close":self.postMessage({type:"info",message:"Closing LZ4 worker"}),self.close()}};